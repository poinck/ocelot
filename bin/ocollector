#!/bin/bash
#
# ocollector is the multiplexer for ocelot. It has some predefined functions
# to draw elements for the side-panel using `ocelot-dzen`. It furthermore
# defines the order of all elements.
#
#    ^   ^
#  +-------+
#  |  o_O  |
#  |  >.<  |__/
#  +-------+
#
# ocelot by AndrÃ© Klausnitzer, CC0

# element order
ELEMENT_ORDER=("dayweek" "time" "date" "year" "desktops" "desktop" "window" "battery" "tm_outside" "tm_outside" "updates" "net" "disk_home" "disk_root" "nolock" "lock")
if [[ -f ~/.ocelotrc ]] ; then
    . ~/.ocelotrc
    if [[ -n "$element_order" ]] ; then
        ELEMENT_ORDER="$element_order"
    fi
fi

# content of elements
declare -a elements

get_type_index() {
    element_type=$1
    index=99

    ii=0
    for element in ${ELEMENT_ORDER[*]} ; do
        if [[ "$element" == "${element_type}" ]] ; then
            index=$ii
            break
        fi
        ii=$(( ii+1 ))
    done

    echo "$index"
}

guess_display_height() {
    current_resolution="$( xrandr -q --verbose | grep "*current" )"
    _tmp1CR=${current_resolution#*x}

    # debug
    #echo "$_tmp1CR"

    current_height=${_tmp1CR%% *}
    echo -n "$current_height"
}

# load user settings, if any
SCALE=1
PANEL_LINE_COUNT=37     # minimum line count
_PLH=24                 # panel line height
_PW=64                  # panel width
if [[ -f ~/.ocelotrc ]] ; then
    . ~/.ocelotrc
    if [[ -n "$scale" ]] ; then
        SCALE="$scale"
    fi
    echo "[DEBUG] scale = $SCALE"
    if [[ -n "$panel_line_count" ]] ; then
        PANEL_LINE_COUNT="$panel_line_count"
    else
        echo "[DEBUG] panel_line_count not set, guessing .."
        display_height=$( guess_display_height )
        PANEL_LINE_COUNT=$(( display_height/_PLH ))
    fi
    PANEL_LINE_COUNT=$(( PANEL_LINE_COUNT/SCALE ))
    echo "[DEBUG] panel_line_count = $PANEL_LINE_COUNT"
fi

# initialize scaling
_FP=$(( 9*SCALE ))      # font pixels
_BP=$(( 4*SCALE ))      # border pixels
_TOP=$(( 1*SCALE+_BP ))
_PW=$(( _PW*SCALE ))
_PLH=$(( _PLH*SCALE ))
#_BI=$(( _PW-(_BP*2) ))  # box inner
#_BTB=$(( 8*SCALE ))     # box border top, bottom and left
#_BTM=$(( _BTB+_BP ))    # box inner top margin
#_TA=$(( 1*SCALE ))      # text adjustment
#_TC=$(( (4*SCALE)+_BTB )) # center text

format_element() {
    i=0
    graphs=""
    for e in $@ ; do
        if [[ "$i" -eq 1 ]] ; then
            e=${e//_/ }
            label="  $e"
        elif [[ "$i" -eq 2 ]] ; then
            background="^fg(#$e)^r(${_PW}x${_PLH})"
        elif [[ "$(( i%2 ))" -eq 1 ]] ; then
            if [[ "$e" -gt 100 ]] ; then
                e=100
            fi
            graph_height=$(( _PLH*e/100 ))
            graph_startposv=$(( _PLH-graph_height ))
        elif [[ "$(( i%2 ))" -eq 0 ]] ; then
            graph_color="^fg(#$e)"
            if [[ "$i" -eq 4 ]] ; then
                graph_posh=0
            else
                graph_posh=$(( ( ( i-4 )/2 )*_BP ))
            fi
            graphs="${graphs}^ib(1)^pa(${graph_posh};${graph_startposv})${graph_color}^r(${_BP}x${graph_height})"
        fi
        i=$(( i+1 ))
    done
    output="${background}${graphs}^ib(1)^pa(0;${_TOP})${label}"

    echo "$output"
}

get_box() {
    outline=$1
    fill=$2
    content=$3

    box="^pa(0;${_BTB})^fg($outline)^r(${_PW}x${_BTB})^fg($fill)^ib(1)^pa(${_BP};${_BTM})^r(${_BI}x${_BP})\n"
    hasSecond=$( echo "$content" | grep "==" )
    if [[ -z "$hasSecond" ]] ; then
        box+="^fg($outline)^r(${_PW}x${_PLH})^fg($fill)^ib(1)^pa(${_BP})^r(${_BI}x${_PLH})^pa(${_TC};${_TA})$content\n"
    else
        _tmpContentFirst=${content%%==*} # first
        _tmpContent=${content#*==} # second
        box+="^fg($outline)^r(${_PW}x${_PLH})^fg($fill)^ib(1)^pa(${_BP})^r(${_BI}x${_PLH})^pa(${_TC};${_TA})$_tmpContentFirst\n"
        box+="^fg($outline)^r(${_PW}x${_PLH})^fg($fill)^ib(1)^pa(${_BP})^r(${_BI}x${_PLH})^pa(${_TC};${_TA})$_tmpContent\n"
    fi
    #box+="^fg($outline)^r(${_PW}x${_PLH})^fg($fill)^ib(1)^pa(${_BP})^r(${_BI}x${_PLH})^pa(${_TC};${_TA})$content\n"
    box+="^pa(0;0)^fg($outline)^r(${_PW}x${_BTB})^fg($fill)^ib(1)^pa(${_BP};0)^r(${_BI}x${_BP})"

    echo "$box"
}

get_box_inner() {
    outline=$1
    fill=$2
    content=$3

    hasSecond=$( echo "$content" | grep "==" )
    if [[ -z "$hasSecond" ]] ; then
        box="^fg($outline)^r(${_PW}x${_PLH})^fg($fill)^ib(1)^pa(${_BP})^r(${_BI}x${_PLH})^pa(${_TC};${_TA})$content\n"
    else
        _tmpContentFirst=${content%%==*} # first
        _tmpContent=${content#*==} # second
        box="^fg($outline)^r(${_PW}x${_PLH})^fg($fill)^ib(1)^pa(${_BP})^r(${_BI}x${_PLH})^pa(${_TC};${_TA})$_tmpContentFirst\n"
        box+="^fg($outline)^r(${_PW}x${_PLH})^fg($fill)^ib(1)^pa(${_BP})^r(${_BI}x${_PLH})^pa(${_TC};${_TA})$_tmpContent\n"
    fi

    echo "$box"
}

get_box_seperator() {
    lastOutline=$1
    lastFill=$2
    nextOutline=$3
    nextFill=$4

    box="^pa(0;0)^fg($lastOutline)^r(${_PW}x${_BTB})^fg($lastFill)^ib(1)^pa(${_BP};0)^r(${_BI}x${_BP})"
    box+="^ib(1)^pa(0;${_BTB})^fg($nextOutline)^r(${_PW}x${_BTB})^fg($nextFill)^ib(1)^pa(${_BP};${_BTM})^r(${_BI}x${_BP})\n"

    echo "$box"
}

# get status about:
# - Master volume of speakers
# - display brightness
# - system load 1, 5, 15
get_status() {
    status="^pa(${_BTB};${_BP})^fg(#808080)^r(${ovolume}x${_BP})^fg(#ffffff)^r(${_BP}x${_BP})"
    status+="^ib(1)^pa(${_BTB};${_BTB})^fg(#807500)^r(${obrightness}x${_BP})^fg(#ffeb00)^r(${_BP}x${_BP})"
    status+="$oload"

    echo -n "$status"
}

# initialize box colors of side-panel elements
pbc="#1c1c1c" # panel background color
titlewindow_set=0

ofifo="/tmp/ocollector.fifo$OCELOT_INSTANCE"
[[ -p $ofifo ]] || mkfifo -m 600 "$ofifo"
tail -f $ofifo | \
while read -r reply ; do
    # parse input from fifo
    replyType=${reply%%:=*} # use first part of reply seperated by :=
    replyContent=${reply#*:=} # use last part of reply seperated by :=
    _tmp1=${replyContent%%;;*} # first
    if [[ -z "$_tmp1" ]] ; then
        _isBox=false
    else
        _box=${replyContent#*;;} # last
        replyContent="$_tmp1"
        boxOutline=${_box%%--*} # first
        boxFill=${_box#*--} # last
        _isBox=true
    fi

    # handle each reply type
    #if [[ "$replyType" == "otime1" ]] ; then
    #    otime1="$replyContent"
    #if [[ "$replyType" == "otime" ]] ; then
    #    otime_start="$( get_box_seperator "$pbc" "$pbc" "$boxOutline" "$boxFill" )"
    #    otime_inner="$( get_box_inner "$boxOutline" "$boxFill" "$replyContent" )"
    #    otime_end="$( get_box_seperator "$boxOutline" "$boxFill" "$pbc" "$pbc" )"
    #    time_box_outline=$boxOutline
    #    time_box_fill=$boxFill
    #if [[ "$replyType" == "otime2" ]] ; then
    #    otime2="$replyContent"
    if [[ "$replyType" == "ovolume" ]] ; then
        ovolume="$replyContent"
        ostatus="$( get_status )"
    elif [[ "$replyType" == "obrightness" ]] ; then
        obrightness="$replyContent"
        ostatus="$( get_status )"
    elif [[ "$replyType" == "oload" ]] ; then
        oload="$replyContent"
        ostatus="$( get_status )"
    elif [[ "$replyType" == "ostatus2" ]] ; then
        ostatus2="$replyContent"
    #elif [[ "$replyType" == "odesktop" ]] ; then
    #    odesktop="$( get_box "$boxOutline" "$boxFill" "$replyContent" )"
    #elif [[ "$replyType" == "odesktops" ]] ; then
    #    odesktops="$replyContent"
    #elif [[ "$replyType" == "obattery" ]] ; then
    #    obattery_start="$( get_box_seperator "$pbc" "$pbc" "$boxOutline" "$boxFill" )"
    #    obattery_inner="$( get_box_inner "$boxOutline" "$boxFill" "$replyContent" )"
    #    battery_boxOutline=$boxOutline
    #    battery_boxFill=$boxFill
    elif [[ "$replyType" == "otmc" ]] ; then
        otmc_inner="$( get_box_inner "$boxOutline" "$boxFill" "$replyContent" )"
        tmc_boxOutline=$boxOutline
        tmc_boxFill=$boxFill
    #elif [[ "$replyType" == "oupdates" ]] ; then
    #    oupdates_inner="$( get_box_inner "$boxOutline" "$boxFill" "$replyContent" )"
    #    updates_box_outline=$boxOutline
    #    updates_box_fill=$boxFill
    #elif [[ "$replyType" == "onet" ]] ; then
    #    onet_inner="$( get_box_inner "$boxOutline" "$boxFill" "$replyContent" )"
    #    onet_end="$( get_box_seperator "$boxOutline" "$boxFill" "$pbc" "$pbc" )"
    #    net_box_outline=$boxOutline
    #    net_box_fill=$boxFill
    #elif [[ "$replyType" == "olocker" ]] ; then
    #    olocker_start="$( get_box_seperator "$pbc" "$pbc" "$boxOutline" "$boxFill" )"
    #    olocker_inner="$( get_box_inner "$boxOutline" "$boxFill" "$replyContent" )"
    #    olocker_end="$( get_box_seperator "$boxOutline" "$boxFill" "$pbc" "$pbc" )"
    #    locker_box_outline=$boxOutline
    #    locker_box_fill=$boxFill
    fi

    # print out title window (will not be updated again)
    if [[ "$titlewindow_set" -eq 0 ]] ; then
        echo -e "^tw() "
        titlewindow_set=1
    fi

    # print out child window, jump to first line
    echo -e "^p1()"

    #echo -e "$otime"
    #echo -en "${otime_start}${otime_inner}${otime_end}"
    #echo -e "$otime2"
    #echo -e "^pa(${tw_left_margin};${tw_top})^fg(#3465a4)^r(${_BP}x${_BP})^fg(#173252)^r(${tw_width}x${_BP})^fg(#3465a4)^r(${_BP}x${_BP})"

    echo -e "$ostatus"
    #echo -e "$odesktop"
    #echo -e "$odesktops"
    #echo -en "${obattery_start}${obattery_inner}"
    #echo -en "$( get_box_seperator "$battery_boxOutline" "$battery_boxFill" "$tmc_boxOutline" "$tmc_boxFill" )"
    echo -en "${otmc_inner}"
    #echo -en "$( get_box_seperator "$tmc_boxOutline" "$tmc_boxFill" "$updates_box_outline" "$updates_box_fill" )"
    #echo -en "${oupdates_inner}"
    #echo -en "$( get_box_seperator "$updates_box_outline" "$updates_box_fill" "$net_box_outline" "$net_box_fill" )"
    #echo -en "${onet_inner}${onet_end}"
    echo -e "$ostatus2"
    #echo -en "${olocker_start}${olocker_inner}${olocker_end}"

    # gather reply type of element, get order index and store it's content
    # to elements array
    current_type=${reply%%\ *}
    current_index=$( get_type_index "$current_type" )
    elements[$current_index]=$( format_element $reply )

    # loop over all elements and echo out
    for ei in ${!elements[*]} ; do
        echo "${elements[$ei]}"
    done

    echo "^fg() "  # blank last line to clear old content
done | ocelot-dzen -p -l "$PANEL_LINE_COUNT" -h "${_PLH}" -ta l -w "${_PW}" -fn "monospace:bold:size=${_FP}" -e 'onstart=uncollapse' -bg "$pbc"

