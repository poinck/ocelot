#!/bin/bash
#
# oso fetches current suspended particulate matter (10, 2.5), temperature and
# humidity from your sensor at OpenSenseMap.
#
#    ^   ^
#  +-------+
#  |  o_O  |
#  |  >.<  |__/
#  +-------+
#
# ocelot by André Klausnitzer, CC0

. ${OCELOT_PATH}/bin/outils.sh
. ~/.ocelotrc

# e - entry
round_and_int() {
    local e=$1

    e=${e//\"}
    e=$( echo "scale=0; (${e}+0.5)/1" | bc -l )
    if [[ "${e}" -lt 0 ]] ; then
        e=$(( e - 1 ))
    fi

    echo $e
}

calculate_so_index() {
    local p10_index=$(( p10_avg * 25 / 20 ))
    if [[ "${p10_index}" -gt 25 ]] ; then
        p10_index=25
    fi
    local p25_index=$(( p25_avg * 25 / 10 ))
    if [[ "${p25_index}" -gt 25 ]] ; then
        p25_index=25
    fi
    local tmp_index=$(( tmp_avg - 19 ))
    if [[ "${tmp_index}" -lt 0 ]] ; then
        tmp_index=$(( tmp_index * (-1) ))
    else
        tmp_index=$(( tmp_index * 2 ))
    fi
    if [[ "${tmp_index}" -gt 25 ]] ; then
        tmp_index=25
    fi
    local hum_index=0
    if [[ "${hum_avg}" -gt 60 ]] ; then
        hum_index=$(( (hum_avg - 60) * 25 / 40 ))
    elif [[ "${hum_avg}" -lt 40 ]] ; then
        hum_index=$(( (40 - hum_avg) * 25 / 40 ))
    fi

    so_index=$(( p10_index + p25_index + tmp_index + hum_index ))

    echo "[DEBUG] p10_index = ${p10_index}"
    echo "[DEBUG] p25_index = ${p25_index}"
    echo "[DEBUG] tmp_index = ${tmp_index}"
    echo "[DEBUG] hum_index = ${hum_index}"
    echo "[DEBUG] so_index = ${so_index}"
}

get_td() {
    local sensort=$1
    local nowts="$2"

    sensort=${sensort//\"/}     # remove '"'
    local td=0

    local sensorts=$( LC_ALL=C date -u -d "${sensort}" '+%s' )
    td=$(( nowts - sensorts ))

    echo ${td}
}

calculate_dewpoint() {
    # https://www.chemie.de/lexikon/Taupunkt.html#Berechnung_von_Taupunkt_und_Frostpunkt
    # valid for t_dry from -30°C until 70°C
    local t_dry=$1
    local rh=$2

    rh=${rh//\"}
    t_dry=${t_dry//\"}

    local t_dew=0
    t_dew=$( echo "(241.2*l(${rh}/100)+((4222.03716*${t_dry})/(241.2+${t_dry})))/(17.5043-l(${rh}/100)-((17.5043*${t_dry})/(241.2+${t_dry})))" | bc -l )

    echo "${t_dew}"
}

calculate_cloud_altitude() {
    # in meters above ground
    local t_dry=$1
    local t_dew=$2

    t_dry=${t_dry//\"}

    local c_alt=0
    # constant temperature change: 100 m / 0.976°C
    c_alt=$( echo "(${t_dry}-(${t_dew}))*102.459" | bc -l )
    c_alt=$( round_and_int "${c_alt}" )

    echo "${c_alt}"
}

# initialize last measurement time
t_last=$( date -u '+%s' )

get_latest_measurement() {
    echo "[DEBUG] boxid = ${osm_boxid}"
    sensors_json=$( curl -s -m 80 "https://api.opensensemap.org/boxes/${osm_boxid}/sensors" )

    # testing
    #echo "${sensors_json}" > ~/_tmp/latest_measurement.json
    #sensors_json=$( cat ~/_tmp/latest_measurement.json )

    sensorids=$( echo "${sensors_json}" | jq '.sensors[]._id' )
    if [[ -n "${sensorids}" ]] ; then
        t_now=$( date -u '+%s' )
        t_range=$(( 3600 + t_last ))
        t_last=${t_now}
        is_old=0
        if [[ "${t_range}" -lt "${t_now}" ]] ; then
            is_old=1  # older than 1 hour
        fi
        sensorid_a=(${sensorids})
        echo -e "[DEBUG] sensorid_a[#${#sensorid_a[*]}] = ${sensorid_a[@]}"

        sensortimes=$( echo "${sensors_json}" | jq '.sensors[].lastMeasurement.createdAt' )
        sensorvalues=$( echo "${sensors_json}" | jq '.sensors[].lastMeasurement.value' )

        sensortime_ai=(${sensortimes})
        sensorvalue_ai=(${sensorvalues})
        for id in ${!sensorid_a[*]} ; do
            #echo "[DEBUG] $id.${sensorid_a[$id]} = ${sensorvalue_ai[$id]}"
            if [[ "\"${osm_p10id}\"" == "${sensorid_a[$id]}" ]] ; then
                p10=${sensorvalue_ai[$id]}
                p10_td=$( get_td "${sensortime_ai[$id]}" "${t_now}" )
            elif [[ "\"${osm_p25id}\"" == "${sensorid_a[$id]}" ]] ; then
                p25=${sensorvalue_ai[$id]}
                p25_td=$( get_td "${sensortime_ai[$id]}" "${t_now}" )
            elif [[ "\"${osm_tmpid}\"" == "${sensorid_a[$id]}" ]] ; then
                tmp=${sensorvalue_ai[$id]}
                tmp_td=$( get_td "${sensortime_ai[$id]}" "${t_now}" )
            elif [[ "\"${osm_humid}\"" == "${sensorid_a[$id]}" ]] ; then
                hum=${sensorvalue_ai[$id]}
                hum_td=$( get_td "${sensortime_ai[$id]}" "${t_now}" )
            fi
        done

        # test
        #tmp="-12.4"

        echo -e "[DEBUG] p10.${osm_p10id} = $p10, td = ${p10_td}"
        echo -e "[DEBUG] p25.${osm_p25id} = $p25, td = ${p25_td}"
        echo -e "[DEBUG] tmp.${osm_tmpid} = $tmp, td = ${tmp_td}"
        echo -e "[DEBUG] hum.${osm_humid} = $hum, td = ${hum_td}"

        if [[ "${is_old}" -eq 0 ]] ; then
            # rotate array and add entry
            p10_a[2]=${p10_a[1]}
            p10_a[1]=${p10_a[0]}
            e=$( round_and_int "$p10" )
            p10_a[0]=$e
            p25_a[2]=${p25_a[1]}
            p25_a[1]=${p25_a[0]}
            e=$( round_and_int "$p25" )
            p25_a[0]=$e
            tmp_a[2]=${tmp_a[1]}
            tmp_a[1]=${tmp_a[0]}
            e=$( round_and_int "$tmp" )
            tmp_a[0]=$e
            hum_a[2]=${hum_a[1]}
            hum_a[1]=${hum_a[0]}
            e=$( round_and_int "$hum" )
            hum_a[0]=$e
        else
            # reset array, if earlier measurements older than 1 hour
            p10_a[2]=0
            p10_a[1]=0
            e=$( round_and_int "$p10" )
            p10_a[0]=$e
            p25_a[2]=0
            p25_a[1]=0
            e=$( round_and_int "$p25" )
            p25_a[0]=$e
            tmp_a[2]=0
            tmp_a[1]=0
            e=$( round_and_int "$tmp" )
            tmp_a[0]=$e
            hum_a[2]=0
            hum_a[1]=0
            e=$( round_and_int "$hum" )
            hum_a[0]=$e
            a_length=0
        fi

        if [[ "${a_length}" -lt 3 ]] ; then
            a_length=$(( a_length + 1 ))
        fi
        p10_avg=$(( (p10_a[0] + p10_a[1] + p10_a[2]) / a_length ))
        p25_avg=$(( (p25_a[0] + p25_a[1] + p25_a[2]) / a_length ))
        tmp_avg=$(( (tmp_a[0] + tmp_a[1] + tmp_a[2]) / a_length ))
        hum_avg=$(( (hum_a[0] + hum_a[1] + hum_a[2]) / a_length ))

        dew=$( calculate_dewpoint "${tmp}" "${hum}" )
        echo "[DEBUG] dew = ${dew}"
        clt=$( calculate_cloud_altitude "${tmp}" "${dew}" )
        dew=$( round_and_int "${dew}" )
        echo "[DEBUG] clt = ${clt}"

        # format sensor values
        if [[ "${p10_avg}" -lt 10 ]] ; then
            p10_avg_f="__${p10_avg}"
        elif [[ "${p10_avg}" -lt 100 ]] ; then
            p10_avg_f="_${p10_avg}"
        else
            p10_avg_f="${p10_avg}"
        fi
        if [[ "${p25_avg}" -lt 10 ]] ; then
            p25_avg_f="__${p25_avg}"
        elif [[ "${p10_avg}" -lt 100 ]] ; then
            p25_avg_f="_${p25_avg}"
        else
            p25_avg_f="${p25_avg}"
        fi
        if [[ "${tmp_avg}" -lt -9 ]] ; then
            tmp_avg_f="${tmp_avg}"
        elif [[ "${tmp_avg}" -lt 0 ]] ; then
            tmp_avg_f="_${tmp_avg}"
        elif [[ "${tmp_avg}" -lt 10 ]] ; then
            tmp_avg_f="__${tmp_avg}"
        elif [[ "${tmp_avg}" -lt 100 ]] ; then
            tmp_avg_f="_${tmp_avg}"
        else
            tmp_avg_f="${tmp_avg}"
        fi
        if [[ "${hum_avg}" -lt 10 ]] ; then
            hum_avg_f="__${hum_avg}"
        elif [[ "${hum_avg}" -lt 100 ]] ; then
            hum_avg_f="_${hum_avg}"
        else
            hum_avg_f="${hum_avg}"
        fi
        if [[ "${dew}" -lt -9 ]] ; then
            dew_f="${dew}"
        elif [[ "${dew}" -lt 0 ]] ; then
            dew_f="_${tmp_avg}"
        elif [[ "${dew}" -lt 10 ]] ; then
            dew_f="__${dew}"
        elif [[ "${dew}" -lt 100 ]] ; then
            dew_f="_${dew}"
        else
            dew_f="${dew}"
        fi
        if [[ "${clt}" -lt 10 ]] ; then
            clt_f="__${clt}"
        elif [[ "${clt}" -lt 100 ]] ; then
            clt_f="_${clt}"
        else
            clt_f="${clt}"
        fi
        p10_graph="$p10_avg $cdarktuerkis"
        if [[ "$p10_avg" -ge 20 ]] ; then
            p10_graph="$p10_avg $cpurpur"
        fi
        p25_graph="$p25_avg $cdarktuerkis"
        if [[ "$p25_avg" -ge 10 ]] ; then
            p25_graph="$p25_avg $cpurpur"
        fi
        tmp_graph="$(( tmp_avg + 40 )) $cdarktuerkis"
        hum_graph="$hum_avg $cdarktuerkis"
        dew_graph="$(( dew + 40 )) $cdarkpurpur"
        hum=$( round_and_int "${hum}" )
        clt_graph="$(( (100 - clt / 25) / 2 + hum / 2 )) $cdarkpurpur"

        calculate_so_index
        so_vpart1="${cdarktuerkis}"
        so_vpart2="${ctuerkis}"
        so_index_graph="$so_index $cdarktuerkis"
        if [[ "${so_index}" -gt 50 ]] ; then
            so_index_graph="$so_index $cpurpur"
            so_vpart1="${cdarkpurpur}"
            so_vpart2="${cpurpur}"
        fi
        if [[ "${so_index}" -lt 10 ]] ; then
            so_index_f="__${so_index}"
        elif [[ "${so_index}" -lt 100 ]] ; then
            so_index_f="_${so_index}"
        else
            so_index_f="${so_index}"
        fi

        # generate 60-minute interval graph
        if [[ "${ni60s}" -lt "${t_now}" ]] ; then
            ni60s="$(( $( date '+%s' ) + ist60s ))"
            for (( ii=15 ; ii>=${i60s} ; ii=ii-1 )) ; do
                local n=$(( ii+1 ))
                p1060s[$n]=${p1060s[$ii]}
                p2560s[$n]=${p2560s[$ii]}
                tmp60s[$n]=${tmp60s[$ii]}
                hum60s[$n]=${hum60s[$ii]}
                dew60s[$n]=${dew60s[$ii]}
                clt60s[$n]=${clt60s[$ii]}
                so_index60s[$n]=${so_index60s[$ii]}
            done
            p1060s[2]=${p10_avg}
            p2560s[2]=${p25_avg}
            tmp60s[2]=$(( tmp_avg + 40 ))
            hum60s[2]=${hum_avg}
            dew60s[2]=$(( dew + 40 ))
            clt60s[2]=$(( (100 - clt / 25) / 2 + hum / 2 ))
            so_index60s[2]=${so_index}
            p1060s_graph=""
            p2560s_graph=""
            tmp60s_graph=""
            hum60s_graph=""
            dew60s_graph=""
            clt60s_graph=""
            so_index60s_graph=""
            for (( ii=${i60s} ; ii<17 ; ii=ii+1 )) ; do
                p1060s_graph="${p1060s_graph} ${p1060s[$ii]} ${cdarkgrey2} "
                p2560s_graph="${p2560s_graph} ${p2560s[$ii]} ${cdarkgrey2} "
                tmp60s_graph="${tmp60s_graph} ${tmp60s[$ii]} ${cdarkgrey2} "
                hum60s_graph="${hum60s_graph} ${hum60s[$ii]} ${cdarkgrey2} "
                dew60s_graph="${dew60s_graph} ${dew60s[$ii]} ${cdarkgrey2} "
                clt60s_graph="${clt60s_graph} ${clt60s[$ii]} ${cdarkgrey2} "
                if [[ "${so_index60s[$ii]}" -gt 50 ]] ; then
                    so_index60s_graph="${so_index60s_graph} ${so_index60s[$ii]} ${cgrey} "
                else
                    so_index60s_graph="${so_index60s_graph} ${so_index60s[$ii]} ${cdarkgrey2} "
                fi
            done
        fi

    else
        echo "[DEBUG] warn: no data received"
        p10_graph="$p10_avg $cgrey"
        p25_graph="$p25_avg $cgrey"
        tmp_graph="$(( tmp_avg + 40 )) $cgrey"
        hum_graph="$hum_avg $cgrey"
        dew_graph="$(( dew + 40 )) $cgrey"
        clt_graph="$(( (100 - clt / 25) / 2 + hum_avg / 2 )) $cgrey"
        so_index_graph="$so_index $cgrey"

        so_vpart1="${cgrey}"
        so_vpart2="${cdarktuerkis}"
    fi

    # dimm value text, when not current (> 1 hour)
    so_not_current=false
    p10_value_fg="${cfont}"
    p10_label_fg="${cdarkfont}"
    p25_value_fg="${cfont}"
    p25_label_fg="${cdarkfont}"
    tmp_value_fg="${cfont}"
    tmp_label_fg="${cdarkfont}"
    hum_value_fg="${cfont}"
    hum_label_fg="${cdarkfont}"
    so_value_fg="ffffff"
    so_label_fg="${cfont}"
    if [[ "${p10_td}" -gt "${max_td}" ]] ; then
        so_not_current=true
        p10_value_fg="${cdarkfont}"
        p10_label_fg="${cdarkerfont}"
    fi
    if [[ "${p25_td}" -gt "${max_td}" ]] ; then
        so_not_current=true
        p25_value_fg="${cdarkfont}"
        p25_label_fg="${cdarkerfont}"
    fi
    if [[ "${tmp_td}" -gt "${max_td}" ]] ; then
        so_not_current=true
        tmp_value_fg="${cdarkfont}"
        tmp_label_fg="${cdarkerfont}"
    fi
    if [[ "${hum_td}" -gt "${max_td}" ]] ; then
        so_not_current=true
        hum_value_fg="${cdarkfont}"
        hum_label_fg="${cdarkerfont}"
    fi
    if [[ "${so_not_current}" == true ]] ; then
        so_value_fg="${cfont}"
        so_label_fg="${cdarkfont}"
    fi
}

# initialize sensor values
p10=0
p25=0
tmp=0
hum=0
p10_a=(0 0 0)
p25_a=(0 0 0)
tmp_a=(0 0 0)
hum_a=(0 0 0)
a_length=0
p10_avg=0
p25_avg=0
tmp_avg=0
hum_avg=0
dew=0
clt=0
so_index=0

# time diffs and defaults
p10_td=0
p25_td=0
tmp_td=0
hum_td=0
max_td=3600     # 1 hour in seconds
#max_td=149      # test
p10_value_fg="${cfont}"
p10_label_fg="${cdarkfont}"
p25_value_fg="${cfont}"
p25_label_fg="${cdarkfont}"
tmp_value_fg="${cfont}"
tmp_label_fg="${cdarkfont}"
hum_value_fg="${cfont}"
hum_label_fg="${cdarkfont}"
dew_value_fg="${cfont}"
dew_label_fg="${cdarkfont}"
clt_value_fg="${cfont}"
clt_label_fg="${cdarkfont}"
so_value_fg="ffffff"
so_label_fg="${cfont}"

# historic sensor 60-minute interval (16 hours in total)
declare -a p1060s
declare -a p2560s
declare -a tmp60s
declare -a hum60s
declare -a dew60s
declare -a clt60s
declare -a so_index60s
i60s=2                                      # start interval
ist60s=3600                                 # interval step: 3600s = 60 minutes
#ist60s=180                                 # test
ni60s="$(( $( date '+%s' ) + ist60s ))"     # next interval

for (( i=${i60s} ; i<17 ; i=i+1 )) ; do
    p1060s[$i]=0
    p2560s[$i]=0
    tmp60s[$i]=0
    hum60s[$i]=0
    dew60s[$i]=0
    clt60s[$i]=0
    so_index60s[$i]=0
done

so_countdown=100

# initialize formatted strings
p10_avg_f="___"
p25_avg_f="___"
tmp_avg_f="___"
hum_avg_f="___"
dew_f="___"
clt_f="___"
so_index_f="___"

ofifo="/tmp/ocollector.fifo$OCELOT_INSTANCE"
while true ; do
    # wait 20 seconds before first measurement ..
    sleep 20
    get_latest_measurement
    so_p10="so_p10 ^fg(#${p10_value_fg})${p10_avg_f}^fg(#${p10_label_fg})P10 ${cdarkgrey} ${p10_graph} ${p1060s_graph}"
    so_p25="so_p25 ^fg(#${p25_value_fg})${p25_avg_f}^fg(#${p25_label_fg})P25 ${cdarkgrey} ${p25_graph} ${p2560s_graph}"
    so_tmp="so_tmp ^fg(#${tmp_value_fg})${tmp_avg_f}^fg(#${tmp_label_fg})TC ${cdarkgrey} ${tmp_graph} ${tmp60s_graph}"
    so_hum="so_hum ^fg(#${hum_value_fg})${hum_avg_f}^fg(#${hum_label_fg})RH ${cdarkgrey} ${hum_graph} ${hum60s_graph}"
    so_dew="so_dew ^fg(#${dew_value_fg})${dew_f}^fg(#${dew_label_fg})DEW ${cdarkgrey} ${dew_graph} ${dew60s_graph}"
    so_clt="so_clt ^fg(#${clt_value_fg})${clt_f}^fg(#${clt_label_fg})M ${cdarkgrey} ${clt_graph} ${clt60s_graph}"
    so="so _ ${cdarkgrey} ${so_index_graph} ${so_index60s_graph}"
    so_value="so_index ^fg(#${so_value_fg})${so_index_f}^fg(#${so_label_fg})SO ${so_vpart1} ${so_countdown} ${so_vpart2}"
    echo "[DEBUG] ${so_p10}"
    echo "[DEBUG] ${so_p25}"
    echo "[DEBUG] ${so_tmp}"
    echo "[DEBUG] ${so_hum}"
    echo "[DEBUG] ${so_dew}"
    echo "[DEBUG] ${so_clt}"
    echo "[DEBUG] ${so}"
    echo "[DEBUG] ${so_value}"
    [[ -p $ofifo ]] || mkfifo -m 600 "$ofifo"
    echo "$so_p10" > "$ofifo"
    echo "$so_p25" > "$ofifo"
    echo "$so_tmp" > "$ofifo"
    echo "$so_hum" > "$ofifo"
    echo "$so_dew" > "$ofifo"
    echo "$so_clt" > "$ofifo"
    echo "$so" > "$ofifo"
    echo "$so_value" > "$ofifo"

    echo "[DEBUG] p10_a = ${p10_a[@]}, avg = ${p10_avg}"
    echo "[DEBUG] p25_a = ${p25_a[@]}, avg = ${p25_avg}"
    echo "[DEBUG] tmp_a = ${tmp_a[@]}, avg = ${tmp_avg}"
    echo "[DEBUG] hum_a = ${hum_a[@]}, avg = ${hum_avg}"

    # .. and 3 minutes after
    for (( ci=0 ; ci<10 ; ci=ci+1 )) ; do
        sleep 18
        so_countdown=$(( so_countdown - 10 ))
        so_value="so_index ^fg(#${so_value_fg})${so_index_f}^fg(#${so_label_fg})SO ${so_vpart1} ${so_countdown} ${so_vpart2}"
        echo "[DEBUG] ${so_value}"
        echo "$so_value" > "$ofifo"
    done
    so_countdown=100
done
